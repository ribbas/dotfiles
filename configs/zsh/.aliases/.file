#!/bin/sh

# Zsh aliases for file utilities

alias cat="highlight -O ansi --force"
alias xclip="xclip -selection c"

alias ls="colorls"
alias l="ls -lah"
alias la="ls -lAh"
alias ll="ls -lh"
alias lr="ls --report --gs -A"

# Convenient and safe wrapper for `find` utilizing piped commands
bulk() {
  [ $# -eq 0 ] && return 1
  _path="."
  _file=""
  _exec=""
  while [ ! $# -eq 0 ]
  do
    case "$1" in

      -p | --path)
        _path="$2"
        ;;

      -n | --name | -f | --file | -d | --dir)

        [ ! -z "${_file}" ] && _file="${_file}-o "
        case "$1" in

          -n | --name)
            _file="${_file}-name \"$2\" "
            ;;

          -f | --file)
            _file="${_file}-name \"*.$2\" "
            ;;

          -d | --dir)
            _file="${_file}-type d -name \"*$2\" "
            ;;

        esac
        ;;

      -e | --exec)
        _exec="${_exec}-exec $2 {} \; "
        ;;

      -h | --help)
        echo "Convenient wrapper for find utilizing piped commands"
        return 0
        ;;

      *)
        return 1
        ;;

    esac
    shift
    shift
  done

  all_files=$(eval "find ${_path} \( ${_file}\) -print | sort")
  if [ -z "${all_files}" ]; then
    echo "No matching files found"
  else
    echo "Following files would be affected:\n"
    echo ${all_files}
    echo
    read -q "confirm?Continue? [Y/n]: "
    echo
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      [ ! -z "${_exec}" ] && eval "find ${_path} \( ${_file}\) ${_exec}"
    fi
  fi
}

# Change current working directory to the last directory a file or directory was copied or moved to via `cp` or `mv`
fl() {
  _new_path=$(history | grep -P "\s(mv|cp)\s" | tail -n1 | grep -oE '[^ ]+$' | sed 's@~@'${HOME}'@g')
  [ -f "${_new_path}" ] && cd $(dirname ${_new_path}) || cd ${_new_path}
}

# Run `xdg-open` on path
gui() {
  [ -z "$1" ] && xdg-open . &>/dev/null || xdg-open $1 &>/dev/null
}

# Open a PDF file with the Evince viewer
pdf() {
  evince "$@" &>/dev/null & disown
}

# Compare 2 files to check if they have the same contents
samefile() {
  cmp -s $1 $2 && echo "$1 and $2 are the same file" || echo "$1 and $2 are different"
}

# Compare 2 files to check if they are linked
sameln() {
  _in=$(stat ${1} -c%i)
  [ ${_in} -eq $(stat ${2} -c%i) ] && echo "${1} and ${2} are links (Inode: ${_in})" ||
  echo "${1} and ${2} are not links"
}

# Undo `cp`
uncp() {
  _file1=$(echo ${LAST_CMD} | awk 'NF>1{ print $(NF-1) }')
  _file2=$(echo ${LAST_CMD} | awk 'NF>1{ print $(NF) }')

  if [ "${_file1}" != "${_file2}" ]; then

    if [ -d "${_file2}" ]; then
      _file2="${_file2}/$(basename ${_file1})"
    else
      if [ -d "${_file1}" ]; then
        return
      fi
    fi

    echo "Undoing 'cp'"
    if [ ! -z "${UNDO}" ]; then

      read -q "confirm?Copy \"${_file1}\" to \"${_file2}\"? [Y/n]: "
      if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
        eval ${LAST_CMD} && export UNDO=
      fi

    else

      read -q "confirm?Remove \"${_file2}\"? [Y/n]: "
      if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
        rm -r ${_file2} && export LAST_CMD="cp ${_file1} ${_file2}" && export UNDO="1"

      fi

    fi
    echo

  fi
}

# Undo `mkdir`
unmkdir() {
  _files=("${(@s/ /)$(echo ${LAST_CMD} | awk -F"mkdir " '{print $(NF)}')}")

  echo "Undoing 'mkdir'"
  if [ ! -z "${UNDO}" ]; then

    read -q "confirm?Make directories: ${_files}? [Y/n]: "
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      eval ${LAST_CMD} && export UNDO=
    fi

  else

    read -q "confirm?Remove: ${_files}? [Y/n]: "
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      rm -r ${_files} && export LAST_CMD="mkdir ${_files}" && export UNDO="1"
    fi

  fi
  echo
}

# Undo `mv`
unmv() {
  _file1=$(echo ${LAST_CMD} | awk 'NF>1{ print $(NF-1) }')
  _file2=$(echo ${LAST_CMD} | awk 'NF>1{ print $(NF) }')

  if [ "${_file1}" != "${_file2}" ]; then

    if [ -d "${_file2}" ]; then
      _file2="${_file2}/$(basename ${_file1})"
    else
      if [ -d "${_file1}" ]; then
        return
      fi
    fi

    echo "Undo 'mv'?"
    read -q "confirm?Move \"${_file2}\" to \"${_file1}\"? [Y/n]: "
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      mv ${_file2} ${_file1} && export LAST_CMD="mv ${_file2} ${_file1}" && export UNDO="1"
    fi
    echo

  fi
}

# Undo last undo-able command
undo() {
  case "$(echo ${LAST_CMD} | grep -Po "(mv|cp|mkdir)(?=\s)")" in

    cp)
      uncp
      ;;

    mv)
      unmv
      ;;

    mkdir)
      unmkdir
      ;;

  esac
}

unzd() {
  if [[ $# != 1 ]]; then echo "Path to archive required"; return 1; fi
  target="${1%.zip}"
  unzip "$1" -d "${target##*/}"
}

# Set up a Python virtual environment
venv() {
  if [ -d .venv ]; then
    source .venv/bin/activate
  else
    read -q "create?No virtual environment found. Create one? [Y/n]: "
    echo
    if [ "${create}" = "Y" ] || [ "${create}" = "y" ]; then
      python -m venv .venv && source .venv/bin/activate
    fi
  fi
}

llatex() {
  latexmk -xelatex -pvc $1
}
